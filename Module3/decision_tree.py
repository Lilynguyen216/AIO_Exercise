# -*- coding: utf-8 -*-
"""Decision-Tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KPdobgfD-x7C9twosx-HLsP_FifSOsrF
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = {
    'Age': [23, 25, 27, 29, 29],
    'Likes English': [0, 1, 1, 0, 0],
    'Likes AI': [0, 1, 0, 1, 0],
    'Raise Salary': [0, 0, 1, 1, 0],
}

df = pd.DataFrame(data)

def Gini_Calculate(col):
    gini = 1
    for _ in col.unique():
        gini -= (col.value_counts()[_]/len(col))**2
    return gini

# gini = Gini_Calculate(df['Raise Salary'])
gini = Gini_Calculate(df['Likes English'])
gini

def Gini_Total_Calculate(col1, col2):
    sum = len(col1) + len(col2)
    GiniD1 = Gini_Calculate(col1)
    GiniD2 = Gini_Calculate(col2)
    return round(len(col1)/sum * GiniD1 + len(col2)/sum * GiniD2, 2)

col1 = df['Raise Salary'][df['Age']<=26]
col2 = df['Raise Salary'][df['Age']>26]

gini_dataset = Gini_Total_Calculate(col1, col2)
gini_dataset

def Gain_Calculate(col):
  return round(1 - Entropy_Calculate(col), 3)

gain = Gain_Calculate(df['Likes English'])
gain

def Entropy_Calculate(col):
    entropy = 0
    values = col.unique()
    #print(values)
    for value in values:
        p = col.value_counts()[value] / len(col)
        entropy += -p * np.log2(p)
    return round(entropy, 3)

entropy = Entropy_Calculate(df['Raise Salary'])
entropy

data = {
    'Age': [23, 25, 27, 29, 29],
    'Likes English': [0, 1, 1, 0, 0],
    'Likes AI': [0, 1, 0, 1, 0],
    'Salary': [200, 400, 300, 500, 400],
}

df = pd.DataFrame(data)

def Sum_Squared_Error_Calculate(node_col, target_col):
    sse = 0
    for _ in node_col.unique():
      sub_target_col = target_col[node_col == _]
      mean = sub_target_col.values.mean()
      sum = 0
      for x in sub_target_col.values:
        sum += (x - mean) ** 2
      sse += 1/len(sub_target_col) * sum
    return round(sse, 0)

SSE = Sum_Squared_Error_Calculate(df['Likes AI'], df['Salary'])
SSE

def Sum_Squared_Error_Calculate(node_col, target_col, condition_num):
    sse = 0
    sub_target_col = [target_col[node_col <= condition_num],
                      target_col[node_col > condition_num]]

    mean = [sub_target_col[0].values.mean(),
            sub_target_col[1].values.mean()]

    for idx in range(len(sub_target_col)):
      sum = 0
      for x in sub_target_col[idx].values:
        sum += (x - mean[idx]) ** 2
      sse += 1/len(sub_target_col[idx]) * sum
    return round(sse, 0)

SSE = Sum_Squared_Error_Calculate(df['Age'], df['Salary'], 24)
SSE